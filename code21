#include<iostream>

using namespace std;

struct ListNode{
	int val;
	ListNode *next;
	ListNode(int x):val(x), next(NULL){}
};

class Solution{
public:
	ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
		if(!l1) return l2;
		if(!l2) return l1;
		ListNode* head = new ListNode(-1);
		ListNode *tmp = head;
		while(l1&&l2){
			if(l1->val <= l2->val){
				tmp->next = l1;
				l1 = l1->next;
			}
			else{
				tmp->next = l2;
				l2 = l2->next;
			}
			tmp = tmp->next;
		}
		while(!l1&&l2){
			tmp->next = l2;
			l2 = l2->next;
			tmp = tmp->next;
		}
		while(l1&&!l2){
			tmp->next = l1;
			l1 = l1->next;
			tmp = tmp->next;
		}
		return head->next;
	}
};

int main(){
	Solution s;
	ListNode *a = new ListNode(1);
	ListNode *b = new ListNode(2);
	ListNode *c = new ListNode(4);
	ListNode *d = new ListNode(1);
	ListNode *e = new ListNode(3);
	ListNode *f = new ListNode(4);
	ListNode *g = new ListNode(-1);
	a->next = b;
	b->next = c;
	d->next = e;
	e->next = f;
	g = s.mergeTwoLists(a, d);
	while(g){
		cout << g->val;
		g = g->next;
		if(g) cout << "->";
	}
	return 0;
}
